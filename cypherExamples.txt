-- CYPHER 
-- example code

MATCH (theater:Venue {name:'Theatre Royal'}),
(newcastle:City {name:'Newcastle'}),
(bard:Author {lastname:'Shakespeare'}),
(newcastle)<-[:STREET|CITY*1..2]-(theater)
<-[:VENUE]-()-[:PERFORMANCE_OF]->()
-[:PRODUCTION_OF]->(play)<-[w:WROTE_PLAY]-(bard)
WHERE w.year > 1608
RETURN DISTINCT play.title AS play

MATCH (theater:Venue {name:'Theatre Royal'}),
(newcastle:City {name:'Newcastle'}),
(bard:Author {lastname:'Shakespeare'}),
(newcastle)<-[:STREET|CITY*1..2]-(theater)
<-[:VENUE]-()-[p:PERFORMANCE_OF]->()
-[:PRODUCTION_OF]->(play)<-[:WROTE_PLAY]-(bard)
RETURN play.title AS play, count(p) AS performance_count
ORDER BY performance_count DESC

-- uses the collect function to produce a comma delimited list
MATCH (bard:Author {lastname:'Shakespeare'})-[w:WROTE_PLAY]->(play)
WITH play
ORDER BY w.year DESC
RETURN collect(play.title) AS plays

-- create graph db to track email interactions
CREATE (alice:User {username:'Alice'}),
(bob:User {username:'Bob'}),
(charlie:User {username:'Charlie'}),
(davina:User {username:'Davina'}),
(edward:User {username:'Edward'}),
(alice)-[:ALIAS_OF]->(bob)

-- add some relationships joining users through email threads
MATCH (bob:User {username:'Bob'}),
(charlie:User {username:'Charlie'}),
(davina:User {username:'Davina'}),
(edward:User {username:'Edward'})
CREATE (bob)-[:EMAILED]->(charlie),
(bob)-[:CC]->(davina),
(bob)-[:BCC]->(edward)

-- create a more detailed structure to place email at 
-- center of graph of relationships
CREATE (email_1:Email {id:'1', content:'Hi Charlie, ... Kind regards, Bob'}),
(bob)-[:SENT]->(email_1),
(email_1)-[:TO]->(charlie),
(email_1)-[:CC]->(davina),
(email_1)-[:CC]->(alice),
(email_1)-[:BCC]->(edward)


-- /////////////////////////////////////
-- create a new node in neo4j
CREATE (ee:Person { name: "Emil", from: "Sweden", klout: 99 })
CREATE (ee:Person { name: "Joe", from: "Asia", klout: 99 })

-- find the nodes
MATCH (ee:Person) WHERE ee.name = "Emil" RETURN ee;
MATCH (ee:Person) WHERE ee.klout = 99 RETURN ee;

-- MATCH clause to specify a pattern of nodes and relationships
-- (ee:Person) a single node pattern with label 'Person' which 
-- will assign matches to the variable 'ee'
-- WHERE clause to constrain the results
-- ee.name = "Emil" compares name property to the value "Emil"
-- RETURN clause used to request particular results

-- you can use the CREATE clause to create many nodes and 
-- relationships at once, ie:
CREATE 
-- nodes...
(js:Person { name: "Johan", from: "Sweden", learn: "surfing" }),
(ir:Person { name: "Ian", from: "England", title: "author" }),
(rvb:Person { name: "Rik", from: "Belgium", pet: "Orval" }),
(ally:Person { name: "Allison", from: "California", hobby: "surfing" }),
-- relationships...
(ee)-[:KNOWS {since: 2001}]->(js),
(ee)-[:KNOWS {rating: 5}]->(ir),
(js)-[:KNOWS]->(ir),
(js)-[:KNOWS]->(rvb),
(ir)-[:KNOWS]->(js),
(ir)-[:KNOWS]->(ally),
(rvb)-[:KNOWS]->(ally)


-- use recommendation pattern to find someone who knows how to surf
MATCH (js:Person)-[:KNOWS]-()-[:KNOWS]-(surfer)
WHERE js.name = "Johan" AND surfer.hobby = "surfing"
RETURN DISTINCT surfer

-- Understand how a query works by prepending EXPLAIN or PROFILE:
-- (Neo4j lets you analyze how your query works via the dashboard's visual query plan)
PROFILE MATCH (js:Person)-[:KNOWS]-()-[:KNOWS]-(surfer)
WHERE js.name = "Johan" AND surfer.hobby = "surfing"
RETURN DISTINCT surfer


-- /////////////////////////////////////
-- Exploring the Movie database in Neo4j
-- pull back movies from Movie db where movie was made between 1995 and 2000
MATCH(n90s:Movie) WHERE n90s.released >= 1995 AND n90s.released < 2000 RETURN n90s.title

-- find out when Halle Berry was born
MATCH(bd:Person) WHERE bd.name = "Halle Berry" RETURN bd.born

-- show all of the movies in the db that Tom Hanks acted in
MATCH(tom{name:"Tom Hanks"}) -[:ACTED_IN]-> (tomsMovies) RETURN tom, tomsMovies

-- who directed "Cloud Atlas"?
MATCH (director)-[:DIRECTED]->(movie) WHERE movie.title = "Cloud Atlas"  RETURN movie, director

-- who are Tom Hanks' co-actors?
MATCH (tom{name:"Tom Hanks"})-[:ACTED_IN]->(movies)<-[:ACTED_IN]-(coActors) RETURN coActors.name

-- who is associated with Cloud Atlas? How are they related to this Movie?
MATCH(actor:Person)-[relationship]-(ca:Movie{title:"Cloud Atlas"}) RETURN ca, actor, Type(relationship)

-- ibid v2 (same query but constrained in WHERE clause instead of Movie object)
MATCH(ca)-[howRelated]-(people) WHERE ca.title="Cloud Atlas" RETURN ca, people, howRelated

-- show me all movies and people 6 degrees or less removed from Kevin Bacon
MATCH(kb:Person{name:"Kevin Bacon"})-[*1..6]-(everything) RETURN everything.name, everything.title

-- use shortestPath() to return all items in the shortest path between Meg Ryan and Kevin Bacon
MATCH path=shortestPath((kb:Person{name:"Kevin Bacon"})-[*]-(mr:Person{name:"Meg Ryan"})) RETURN path

-- find coActors that Tom Hanks has not worked with
MATCH(th:Person{name:"Tom Hanks"})-[:ACTED_IN]->(movie)<-[:ACTED_IN]-(coActor), (coActor)-[:ACTED_IN]->(movie2)<-[:ACTED_IN]-(cocoActor) WHERE NOT (th)-[:ACTED_IN]->()<-[:ACTED_IN]-(cocoActor) AND th <> cocoActor RETURN cocoActor.name AS Recommend, count(*) AS Strength ORDER BY Strength DESC

-- find someone to introduce Tom Hanks to Tom Cruise
MATCH(th:Person{name:"Tom Hanks"})-[:ACTED_IN]->(m1)<-[:ACTED_IN]-(coActor), (tc:Person{name:"Tom Cruise"})-[:ACTED_IN]->(m2)<-[:ACTED_IN]-(coActor) RETURN DISTINCT coActor